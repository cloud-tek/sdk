on:
  workflow_call:
    inputs:
      Directory:
        description: 'Directory to build'
        type: string
        required: true
      NetVersion:
        description: 'Version of .NET to use'
        type: string
        required: true
      Build:
        description: 'Build the project'
        type: boolean
        required: false
        default: true
      Pack:
        description: 'Pack the project'
        type: boolean
        required: false
        default: false
      NuGetApiUrl:
        description: 'NuGet API URL'
        type: string
        required: false
    secrets:
      NuGetUsername:
        required: false
      NuGetPassword:
        required: false
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    # outputs:
    #   nupkgFilename: ${{ steps.nupkg.outputs.filename }}
    steps:
    - uses: actions/checkout@v3
    - name: setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.NetVersion }}
    - name: dotnet tool restore
      run: dotnet tool restore
    - name: dotnet restore
      if: inputs.Build || inputs.Pack
      run: dotnet restore
    - name: dotnet build
      if: inputs.Build
      run: dotnet build --configuration Release --no-restore
    - name: dotnet pack
      if: inputs.Pack
      run: dotnet pack -v normal -c Release --no-build --include-symbols --include-source -o package
    - name: tree artifacts
      run: |
        tree -a
    # - name: Verify package name & version
    #   id: nupkg
    #   if: inputs.publish
    #   run: |
    #     TAG_NAME=${{ inputs.tagName }}
    #     VERSION=${TAG_NAME##*v}
    #     NUPKG="${{ inputs.projectName }}.${VERSION}.nupkg"
    #     echo "::set-output name=filename::$NUPKG"
    #     if [ ! -f package/$NUPKG ]; then
    #       echo "File '$NUPKG' does not exist";
    #       exit 1;
    #     fi
    # - uses: actions/upload-artifact@v3
    #   if: inputs.publish
    #   with:
    #     name: package
    #     path: src/${{ inputs.projectName }}/package

  # publish:
  #   runs-on: ubuntu-latest
  #   if: inputs.publish
  #   needs: [build]
  #   steps:
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: package
  #       path: unsigned
  #   - name: Save & verify certificate
  #     run: |
  #       echo ${{ secrets.nugetCertificate }} | base64 -d > cert.p12
  #       openssl pkcs12 -in cert.p12 -nodes -passin pass:"${{ secrets.nugetCertificatePassword }}" | openssl x509 -noout -subject || echo "Certificate validation failed"
  #   - name: Sign package
  #     run: dotnet nuget sign unsigned/*.nupkg --certificate-path cert.p12 --certificate-password ${{ secrets.nugetCertificatePassword }} --timestamper http://timestamp.digicert.com --output signed
  #   - name: Push package
  #     run: dotnet nuget push signed/${{needs.build.outputs.nupkgFilename}} --api-key ${{ secrets.nugetApiKey }} --source https://api.nuget.org/v3/index.json
